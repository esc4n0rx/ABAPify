#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ABAPify - Gerador de c√≥digo ABAP baseado em IA
Enhanced Edition v2.0
"""

import os
import sys
from typing import List, Optional

import click
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm
from rich.table import Table
from rich.text import Text

# Importa localmente para evitar erros de m√≥dulo
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Agora importa os m√≥dulos do projeto
from abapify.cli.commands import (
    generate_alv,
    generate_class,
    generate_function_module,
    generate_report,
    generate_structure,
    generate_test,
    generate_custom_program,
    generate_enhancement,
)
from abapify.utils.config import load_config, list_config, get_sap_environments
from abapify.utils.logger import setup_logger

# Inicializa o console e logger
console = Console()
logger = setup_logger()


def print_header():
    """Exibe o cabe√ßalho do ABAPify."""
    console.print(Panel.fit(
        "[bold blue]ABAPify Enhanced Edition v2.0[/bold blue]\n"
        "[cyan]Gerador de c√≥digo ABAP baseado em IA[/cyan]\n"
        "[dim]Powered by Arcee Conductor + SAP Integration[/dim]",
        border_style="cyan",
        padding=(1, 2),
    ))
    console.print("")


def show_config_status():
    """Exibe o status das configura√ß√µes."""
    try:
        config = list_config()
        provider = config.get("DEFAULT_PROVIDER", "N√£o configurado")
        
        # Verifica se h√° pelo menos uma API key configurada
        has_api_key = any([
            config.get("ARCEE_TOKEN") and config.get("ARCEE_TOKEN") != "N√ÉO CONFIGURADO",
            config.get("GROQ_API_KEY") and config.get("GROQ_API_KEY") != "N√ÉO CONFIGURADO",
            config.get("OPENAI_API_KEY") and config.get("OPENAI_API_KEY") != "N√ÉO CONFIGURADO",
        ])
        
        # Verifica configura√ß√£o SAP
        sap_environments = get_sap_environments()
        has_sap = len(sap_environments) > 0
        
        # Status LLM
        if has_api_key:
            console.print(f"[green]‚úÖ LLM Configurado - Provedor: {provider}[/green]")
        else:
            console.print("[red]‚ùå LLM n√£o configurado - Execute a op√ß√£o 9 para configurar[/red]")
        
        # Status SAP
        if has_sap:
            console.print(f"[green]‚úÖ SAP Configurado - Ambientes: {', '.join(sap_environments)}[/green]")
        else:
            console.print("[yellow]‚ö†Ô∏è  SAP n√£o configurado - Funcionalidades b√°sicas dispon√≠veis[/yellow]")
        
    except Exception:
        console.print("[red]‚ùå Erro nas configura√ß√µes - Execute a op√ß√£o 9[/red]")


def show_main_menu() -> int:
    """
    Exibe o menu principal e retorna a op√ß√£o selecionada.
    
    Returns:
        int: N√∫mero da op√ß√£o selecionada.
    """
    table = Table(show_header=False, box=None)
    
    # Op√ß√µes b√°sicas
    table.add_row("[1]", "Gerar Relat√≥rio ALV")
    table.add_row("[2]", "Gerar Relat√≥rio Simples")
    table.add_row("[3]", "Gerar Classe ABAP")
    table.add_row("[4]", "Gerar M√≥dulo de Fun√ß√£o")
    table.add_row("[5]", "Gerar Estrutura")
    table.add_row("[6]", "Gerar Teste Unit√°rio")
    table.add_row("[7]", "[bold yellow]Gerar Programa Personalizado[/bold yellow]")
    table.add_row("[8]", "Gerar Enhancement")
    
    # Op√ß√µes SAP
    table.add_row("", "")  # Espa√ßo
    table.add_row("", "[bold green]üöÄ Funcionalidades SAP[/bold green]")
    table.add_row("[10]", "[bold green]Gerar com An√°lise SAP[/bold green]")
    table.add_row("[11]", "[green]Analisar Tabela SAP[/green]")
    table.add_row("[12]", "[green]Testar Conex√£o SAP[/green]")
    
    # Configura√ß√µes
    table.add_row("", "")  # Espa√ßo
    table.add_row("[9]", "[bold cyan]Configura√ß√µes[/bold cyan]")
    table.add_row("[0]", "Sair")
    
    console.print(Panel(table, title="Selecione uma op√ß√£o", border_style="cyan"))
    
    choice = Prompt.ask("Op√ß√£o", choices=["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], default="0")
    return int(choice)


def handle_alv_generation():
    """Manipula o fluxo de gera√ß√£o de relat√≥rio ALV."""
    console.print("\n[bold cyan]Gera√ß√£o de Relat√≥rio ALV[/bold cyan]")
    
    description = Prompt.ask("[cyan]Descri√ß√£o do relat√≥rio[/cyan]")
    
    tables = []
    console.print("[cyan]Tabelas a serem utilizadas[/cyan] (deixe vazio para finalizar)")
    
    while True:
        table = Prompt.ask("  Nome da tabela", default="")
        if not table:
            break
        tables.append(table)
    
    if not tables:
        console.print("[yellow]Aviso: Nenhuma tabela especificada[/yellow]")
    
    output_dir = Prompt.ask("[cyan]Diret√≥rio de sa√≠da[/cyan]", default="./output")
    default_filename = f"z_alv_{description.lower().replace(' ', '_')[:20]}.abap"
    filename = Prompt.ask("[cyan]Nome do arquivo[/cyan]", default=default_filename)
    
    with console.status("[cyan]Gerando c√≥digo ABAP...[/cyan]"):
        generate_alv(description, tuple(tables), output_dir, filename)


def handle_report_generation():
    """Manipula o fluxo de gera√ß√£o de relat√≥rio simples."""
    console.print("\n[bold cyan]Gera√ß√£o de Relat√≥rio Simples[/bold cyan]")
    
    description = Prompt.ask("[cyan]Descri√ß√£o do relat√≥rio[/cyan]")
    
    tables = []
    console.print("[cyan]Tabelas a serem utilizadas[/cyan] (deixe vazio para finalizar)")
    
    while True:
        table = Prompt.ask("  Nome da tabela", default="")
        if not table:
            break
        tables.append(table)
    
    if not tables:
        console.print("[yellow]Aviso: Nenhuma tabela especificada[/yellow]")
    
    output_dir = Prompt.ask("[cyan]Diret√≥rio de sa√≠da[/cyan]", default="./output")
    default_filename = f"z_report_{description.lower().replace(' ', '_')[:20]}.abap"
    filename = Prompt.ask("[cyan]Nome do arquivo[/cyan]", default=default_filename)
    
    with console.status("[cyan]Gerando c√≥digo ABAP...[/cyan]"):
        generate_report(description, tuple(tables), output_dir, filename)


def handle_class_generation():
    """Manipula o fluxo de gera√ß√£o de classe ABAP."""
    console.print("\n[bold cyan]Gera√ß√£o de Classe ABAP[/bold cyan]")
    
    description = Prompt.ask("[cyan]Descri√ß√£o/prop√≥sito da classe[/cyan]")
    
    methods = []
    console.print("[cyan]M√©todos a serem implementados[/cyan] (deixe vazio para finalizar)")
    
    while True:
        method = Prompt.ask("  Nome do m√©todo", default="")
        if not method:
            break
        methods.append(method)
    
    if not methods:
        methods.append("constructor")
        console.print("[yellow]Adicionando m√©todo constructor por padr√£o[/yellow]")
    
    output_dir = Prompt.ask("[cyan]Diret√≥rio de sa√≠da[/cyan]", default="./output")
    default_filename = f"zcl_{description.lower().replace(' ', '_')[:20]}.abap"
    filename = Prompt.ask("[cyan]Nome do arquivo[/cyan]", default=default_filename)
    
    with console.status("[cyan]Gerando c√≥digo ABAP...[/cyan]"):
        generate_class(description, tuple(methods), output_dir, filename)


def handle_function_generation():
    """Manipula o fluxo de gera√ß√£o de m√≥dulo de fun√ß√£o ABAP."""
    console.print("\n[bold cyan]Gera√ß√£o de M√≥dulo de Fun√ß√£o ABAP[/bold cyan]")
    
    description = Prompt.ask("[cyan]Descri√ß√£o/prop√≥sito do m√≥dulo de fun√ß√£o[/cyan]")
    
    params = []
    console.print("[cyan]Par√¢metros do m√≥dulo[/cyan] (deixe vazio para finalizar)")
    console.print("  Formato: NOME:TIPO:DIRE√á√ÉO (ex: VBELN:CHAR(10):I para importa√ß√£o)")
    
    while True:
        param = Prompt.ask("  Par√¢metro", default="")
        if not param:
            break
        params.append(param)
    
    if not params:
        console.print("[yellow]Aviso: Nenhum par√¢metro especificado[/yellow]")
    
    output_dir = Prompt.ask("[cyan]Diret√≥rio de sa√≠da[/cyan]", default="./output")
    default_filename = f"z_fm_{description.lower().replace(' ', '_')[:20]}.abap"
    filename = Prompt.ask("[cyan]Nome do arquivo[/cyan]", default=default_filename)
    
    with console.status("[cyan]Gerando c√≥digo ABAP...[/cyan]"):
        generate_function_module(description, tuple(params), output_dir, filename)


def handle_structure_generation():
    """Manipula o fluxo de gera√ß√£o de estrutura ABAP."""
    console.print("\n[bold cyan]Gera√ß√£o de Estrutura ABAP[/bold cyan]")
    
    description = Prompt.ask("[cyan]Descri√ß√£o/prop√≥sito da estrutura[/cyan]")
    
    fields = []
    console.print("[cyan]Campos da estrutura[/cyan] (deixe vazio para finalizar)")
    console.print("  Formato: NOME:TIPO (ex: MATNR:CHAR(18))")
    
    while True:
        field = Prompt.ask("  Campo", default="")
        if not field:
            break
        fields.append(field)
    
    if not fields:
        console.print("[yellow]Aviso: Nenhum campo especificado[/yellow]")
    
    output_dir = Prompt.ask("[cyan]Diret√≥rio de sa√≠da[/cyan]", default="./output")
    default_filename = f"zstruct_{description.lower().replace(' ', '_')[:20]}.abap"
    filename = Prompt.ask("[cyan]Nome do arquivo[/cyan]", default=default_filename)
    
    with console.status("[cyan]Gerando c√≥digo ABAP...[/cyan]"):
        generate_structure(description, tuple(fields), output_dir, filename)


def handle_test_generation():
   """Manipula o fluxo de gera√ß√£o de teste unit√°rio ABAP."""
   console.print("\n[bold cyan]Gera√ß√£o de Teste Unit√°rio ABAP[/bold cyan]")
   
   target = Prompt.ask("[cyan]Nome da classe ou m√≥dulo a ser testado[/cyan]")
   
   output_dir = Prompt.ask("[cyan]Diret√≥rio de sa√≠da[/cyan]", default="./output")
   default_filename = f"zcl_test_{target.lower().replace(' ', '_')[:20]}.abap"
   filename = Prompt.ask("[cyan]Nome do arquivo[/cyan]", default=default_filename)
   
   with console.status("[cyan]Gerando c√≥digo ABAP...[/cyan]"):
       generate_test(target, output_dir, filename)


def handle_custom_program_generation():
   """Manipula o fluxo de gera√ß√£o de programa personalizado."""
   console.print("\n[bold yellow]Gera√ß√£o de Programa Personalizado[/bold yellow]")
   console.print("[dim]Este recurso permite criar programas ABAP complexos baseados em especifica√ß√µes detalhadas[/dim]")
   
   output_dir = Prompt.ask("[cyan]Diret√≥rio de sa√≠da[/cyan]", default="./output")
   
   with console.status("[cyan]Iniciando assistente interativo...[/cyan]"):
       generate_custom_program(output_dir)


def handle_enhancement_generation():
   """Manipula o fluxo de gera√ß√£o de enhancement ABAP."""
   console.print("\n[bold cyan]Gera√ß√£o de Enhancement ABAP[/bold cyan]")
   
   base_object = Prompt.ask("[cyan]Objeto base a ser melhorado[/cyan]")
   
   enhancement_type = Prompt.ask(
       "[cyan]Tipo de enhancement[/cyan]",
       choices=["BADI", "Enhancement Point", "Customer Exit", "User Exit"],
       default="BADI"
   )
   
   functionality = Prompt.ask("[cyan]Funcionalidade a ser adicionada[/cyan]")
   
   enhancement_points = Prompt.ask("[cyan]Pontos espec√≠ficos de enhancement[/cyan]", default="")
   
   output_dir = Prompt.ask("[cyan]Diret√≥rio de sa√≠da[/cyan]", default="./output")
   default_filename = f"z_enh_{base_object.lower().replace(' ', '_')[:15]}.abap"
   filename = Prompt.ask("[cyan]Nome do arquivo[/cyan]", default=default_filename)
   
   with console.status("[cyan]Gerando c√≥digo ABAP...[/cyan]"):
       generate_enhancement(
           base_object=base_object,
           enhancement_type=enhancement_type,
           functionality=functionality,
           output_dir=output_dir,
           filename=filename,
           enhancement_points=enhancement_points,
       )


def handle_sap_aware_generation():
   """Manipula gera√ß√£o com an√°lise SAP autom√°tica."""
   console.print("\n[bold green]üöÄ Gera√ß√£o com An√°lise SAP[/bold green]")
   console.print("[dim]Esta funcionalidade analisa automaticamente as tabelas no SAP para gerar c√≥digo otimizado[/dim]")
   
   # Verifica se h√° ambientes SAP configurados
   sap_environments = get_sap_environments()
   if not sap_environments:
       console.print("[red]Erro: Nenhum ambiente SAP configurado![/red]")
       console.print("Execute [cyan]Configura√ß√µes > Configurar SAP[/cyan] primeiro.")
       return
   
   # Sele√ß√£o do ambiente
   environment = Prompt.ask(
       "[cyan]Ambiente SAP[/cyan]",
       choices=sap_environments,
       default=sap_environments[0]
   )
   
   # Tipo de c√≥digo
   code_type = Prompt.ask(
       "[cyan]Tipo de c√≥digo[/cyan]",
       choices=["alv", "report"],
       default="alv"
   )
   
   description = Prompt.ask("[cyan]Descri√ß√£o[/cyan]")
   
   tables = []
   console.print("[cyan]Tabelas a serem analisadas[/cyan] (deixe vazio para finalizar)")
   
   while True:
       table = Prompt.ask("  Nome da tabela", default="")
       if not table:
           break
       tables.append(table)
   
   if not tables:
       console.print("[red]Erro: Pelo menos uma tabela deve ser especificada para an√°lise SAP[/red]")
       return
   
   output_dir = Prompt.ask("[cyan]Diret√≥rio de sa√≠da[/cyan]", default="./output")
   default_filename = f"z_sap_{code_type}_{description.lower().replace(' ', '_')[:15]}.abap"
   filename = Prompt.ask("[cyan]Nome do arquivo[/cyan]", default=default_filename)
   
   try:
       from abapify.cli.sap_commands import generate_sap_aware_code
       
       with console.status(f"[cyan]Conectando ao SAP {environment} e analisando tabelas...[/cyan]"):
           generate_sap_aware_code(
               code_type=code_type,
               description=description,
               tables=tables,
               output_dir=output_dir,
               filename=filename,
               sap_environment=environment
           )
   except ImportError:
       console.print("[red]Erro: M√≥dulo SAP n√£o dispon√≠vel. Verifique a instala√ß√£o.[/red]")
   except Exception as e:
       console.print(f"[red]Erro na gera√ß√£o SAP-aware: {str(e)}[/red]")


def handle_analyze_table():
   """Manipula an√°lise de tabela SAP."""
   console.print("\n[bold green]An√°lise de Tabela SAP[/bold green]")
   
   # Verifica ambientes SAP
   sap_environments = get_sap_environments()
   if not sap_environments:
       console.print("[red]Erro: Nenhum ambiente SAP configurado![/red]")
       return
   
   environment = Prompt.ask(
       "[cyan]Ambiente SAP[/cyan]",
       choices=sap_environments,
       default=sap_environments[0]
   )
   
   table_name = Prompt.ask("[cyan]Nome da tabela[/cyan]").upper()
   
   include_relationships = Confirm.ask(
       "[cyan]Incluir an√°lise de relacionamentos?[/cyan]",
       default=True
   )
   
   save_analysis = Confirm.ask(
       "[cyan]Salvar an√°lise em arquivo JSON?[/cyan]",
       default=False
   )
   
   output_file = None
   if save_analysis:
       output_file = Prompt.ask(
           "[cyan]Nome do arquivo de an√°lise[/cyan]",
           default=f"analise_{table_name.lower()}.json"
       )
   
   try:
       from abapify.cli.sap_commands import analyze_table_structure
       analyze_table_structure(
           table_name=table_name,
           environment=environment,
           include_relationships=include_relationships,
           output_file=output_file
       )
   except ImportError:
       console.print("[red]Erro: M√≥dulo SAP n√£o dispon√≠vel.[/red]")
   except Exception as e:
       console.print(f"[red]Erro na an√°lise: {str(e)}[/red]")


def handle_test_sap_connection():
   """Manipula teste de conex√£o SAP."""
   console.print("\n[bold green]Teste de Conex√£o SAP[/bold green]")
   
   sap_environments = get_sap_environments()
   if not sap_environments:
       console.print("[red]Erro: Nenhum ambiente SAP configurado![/red]")
       return
   
   environment = Prompt.ask(
       "[cyan]Ambiente SAP para testar[/cyan]",
       choices=sap_environments,
       default=sap_environments[0]
   )
   
   try:
       from abapify.cli.config_commands import test_sap_connection
       test_sap_connection.callback(environment=environment)
   except ImportError:
       console.print("[red]Erro: M√≥dulo SAP n√£o dispon√≠vel.[/red]")
   except Exception as e:
       console.print(f"[red]Erro no teste: {str(e)}[/red]")


def handle_configuration():
   """Manipula o menu de configura√ß√µes."""
   console.print("\n[bold cyan]Menu de Configura√ß√µes[/bold cyan]")
   
   config_table = Table(show_header=False, box=None)
   config_table.add_row("[1]", "Exibir configura√ß√µes atuais")
   config_table.add_row("[2]", "Configurar provedor de IA")
   config_table.add_row("[3]", "Configurar chaves de API")
   config_table.add_row("[4]", "Configura√ß√£o completa (assistente)")
   config_table.add_row("[5]", "[bold yellow]Configurar SAP[/bold yellow]")
   config_table.add_row("[6]", "[yellow]Testar conex√£o SAP[/yellow]")
   config_table.add_row("[0]", "Voltar ao menu principal")
   
   console.print(Panel(config_table, title="Op√ß√µes de Configura√ß√£o", border_style="cyan"))
   
   choice = Prompt.ask("Op√ß√£o", choices=["0", "1", "2", "3", "4", "5", "6"], default="0")
   
   if choice == "1":
       # Exibir configura√ß√µes
       from abapify.cli.config_commands import show_config
       show_config.callback()
   
   elif choice == "2":
       # Configurar provedor
       from abapify.utils.config import save_config
       provider = Prompt.ask(
           "Provedor padr√£o",
           choices=["arcee", "groq", "openai"],
           default="arcee"
       )
       save_config({"DEFAULT_PROVIDER": provider})
       console.print(f"[green]Provedor configurado para: {provider}[/green]")
   
   elif choice == "3":
       # Configurar chaves de API
       from abapify.utils.config import save_config
       config_updates = {}
       
       console.print("[cyan]Configure as chaves de API (deixe vazio para manter atual):[/cyan]")
       
       arcee_token = Prompt.ask("Token Arcee", password=True, default="")
       if arcee_token:
           config_updates["ARCEE_TOKEN"] = arcee_token
       
       groq_key = Prompt.ask("Chave Groq", password=True, default="")
       if groq_key:
           config_updates["GROQ_API_KEY"] = groq_key
       
       openai_key = Prompt.ask("Chave OpenAI", password=True, default="")
       if openai_key:
           config_updates["OPENAI_API_KEY"] = openai_key
       
       if config_updates:
           save_config(config_updates)
           console.print("[green]Chaves de API atualizadas![/green]")
       else:
           console.print("[yellow]Nenhuma chave foi alterada.[/yellow]")
   
   elif choice == "4":
       # Configura√ß√£o completa
       from abapify.cli.config_commands import setup_config
       setup_config.callback()
   
   elif choice == "5":
       # Configurar SAP
       from abapify.cli.config_commands import setup_sap_config_command
       setup_sap_config_command.callback()
   
   elif choice == "6":
       # Testar SAP
       handle_test_sap_connection()


def main():
   """Fun√ß√£o principal do ABAPify."""
   try:
       # Carrega configura√ß√µes
       load_config()
       
       # Exibe cabe√ßalho
       print_header()
       
       # Exibe status das configura√ß√µes
       show_config_status()
       
       # Loop principal
       while True:
           choice = show_main_menu()
           
           if choice == 0:
               console.print("[cyan]Encerrando ABAPify...[/cyan]")
               break
           elif choice == 1:
               handle_alv_generation()
           elif choice == 2:
               handle_report_generation()
           elif choice == 3:
               handle_class_generation()
           elif choice == 4:
               handle_function_generation()
           elif choice == 5:
               handle_structure_generation()
           elif choice == 6:
               handle_test_generation()
           elif choice == 7:
               handle_custom_program_generation()
           elif choice == 8:
               handle_enhancement_generation()
           elif choice == 9:
               handle_configuration()
           elif choice == 10:
               handle_sap_aware_generation()
           elif choice == 11:
               handle_analyze_table()
           elif choice == 12:
               handle_test_sap_connection()
           
           console.print("")
           if choice not in [9, 11, 12] and not Confirm.ask("[cyan]Deseja realizar outra opera√ß√£o?[/cyan]", default=True):
               console.print("[cyan]Encerrando ABAPify...[/cyan]")
               break
   
   except KeyboardInterrupt:
       console.print("\n[cyan]Opera√ß√£o cancelada pelo usu√°rio.[/cyan]")
   except Exception as e:
       logger.error(f"Erro inesperado: {str(e)}")
       console.print(f"[bold red]Erro inesperado:[/] {str(e)}")
   
   return 0


if __name__ == "__main__":
   sys.exit(main())